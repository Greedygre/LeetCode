/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func constructMaximumBinaryTree(nums []int) *TreeNode {
  return buildTree(nums,0,len(nums)-1)
}
func buildTree(nums []int,start int,end int) *TreeNode {
	if start > end {
		return nil
	}
	maxIndex := maxIndex(nums,start,end)
	root := new(TreeNode)
    root.Val = nums[maxIndex]
	root.Left = buildTree(nums,start,maxIndex-1)
	root.Right = buildTree(nums,maxIndex+1,end)
	return root
}
func maxIndex(arr []int,start int,end int) int {
	maxIndex := start
	for i:=start;i<=end;i++ {
		if arr[i] > arr[maxIndex] {
			maxIndex = i
		}
	}
	return maxIndex
}
// java

class Solution {
   public TreeNode constructMaximumBinaryTree(int[] nums) {
       return buildTree(nums,0,nums.length -1);
   }
   public TreeNode  buildTree(int[] nums, int start, int end){
       if (start > end){
           return null;
       }
       int maxIndex = maxIndex(nums, start, end);
       TreeNode root = new TreeNode(nums[maxIndex]);
       root.left = buildTree(nums,start,maxIndex - 1);
       root.right = buildTree(nums,maxIndex + 1,end);
       return root;
   }
   public int maxIndex(int[] arr,int start,int end){

       int maxIndex = start;
       for(int i = start ;i <= end; i++){
           if (arr[i] > arr[maxIndex]){
               maxIndex = i;
           }
       }
       return maxIndex;
   }
}