package 题目

//给定两个正整数 x 和 y，如果某一整数等于 x^i + y^j，其中整数 i >= 0 且 j >= 0，那么我们认为该整数是一个强整数。
//
//返回值小于或等于 bound 的所有强整数组成的列表。
//
//你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。
//示例 1：
//
//输入：x = 2, y = 3, bound = 10
//输出：[2,3,4,5,7,9,10]
//解释：
//2 = 2^0 + 3^0
//3 = 2^1 + 3^0
//4 = 2^0 + 3^1
//5 = 2^1 + 3^1
//7 = 2^2 + 3^1
//9 = 2^3 + 3^0
//10 = 2^0 + 3^2
//示例 2：
//
//输入：x = 3, y = 5, bound = 15
//输出：[2,4,6,8,10,14]
// 思路：(bound-x*i)%j==0
//func powerfulIntegers(x int, y int, bound int) []int {
//	result := []int{}
//	n := bound / x
//	fmt.Println("n:", n)
//	for i := 0; i <= n; i++ {
//		if (bound-x*i)%j == 0 {
//			result = append(result, cur)
//		}
//	}
//	return nil
//}
func main() {

}

// 因为a b 互相换最终可以换出想要的很多情况，所以可以合并a,b排序，
// 问题转换为2n个数字中选出n个的和与另外n个的差最小
// 1 3 6 9 12 16 18 24   4+42=46，15+28=43
// 1 2 3 4 0
// 1 9 10 11 7
func makemin(a, b []int) int {

}
